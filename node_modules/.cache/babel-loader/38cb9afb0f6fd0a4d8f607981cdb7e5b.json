{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n}); // https://github.com/feross/buffer/blob/master/index.js#L1127\n\nfunction verifuint(value, max) {\n  if (typeof value !== 'number') throw new Error('cannot write a non-number as a number');\n  if (value < 0) throw new Error('specified a negative value for writing an unsigned value');\n  if (value > max) throw new Error('RangeError: value out of range');\n  if (Math.floor(value) !== value) throw new Error('value has a fractional component');\n}\n\nfunction readUInt64LE(buffer, offset) {\n  var a = buffer.readUInt32LE(offset);\n  var b = buffer.readUInt32LE(offset + 4);\n  b *= 0x100000000;\n  verifuint(b + a, 0x001fffffffffffff);\n  return b + a;\n}\n\nexports.readUInt64LE = readUInt64LE;\n\nfunction writeUInt64LE(buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff);\n  buffer.writeInt32LE(value & -1, offset);\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n  return offset + 8;\n}\n\nexports.writeUInt64LE = writeUInt64LE;\n\nfunction reverseBuffer(buffer) {\n  if (buffer.length < 1) return buffer;\n  var j = buffer.length - 1;\n  var tmp = 0;\n\n  for (var i = 0; i < buffer.length / 2; i++) {\n    tmp = buffer[i];\n    buffer[i] = buffer[j];\n    buffer[j] = tmp;\n    j--;\n  }\n\n  return buffer;\n}\n\nexports.reverseBuffer = reverseBuffer;","map":{"version":3,"sources":["/home/aashan/2048/node_modules/bitcoinjs-lib/src/bufferutils.js"],"names":["Object","defineProperty","exports","value","verifuint","max","Error","Math","floor","readUInt64LE","buffer","offset","a","readUInt32LE","b","writeUInt64LE","writeInt32LE","writeUInt32LE","reverseBuffer","length","j","tmp","i"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CACA;;AACA,SAASC,SAAT,CAAmBD,KAAnB,EAA0BE,GAA1B,EAA+B;AAC7B,MAAI,OAAOF,KAAP,KAAiB,QAArB,EACE,MAAM,IAAIG,KAAJ,CAAU,uCAAV,CAAN;AACF,MAAIH,KAAK,GAAG,CAAZ,EACE,MAAM,IAAIG,KAAJ,CAAU,0DAAV,CAAN;AACF,MAAIH,KAAK,GAAGE,GAAZ,EAAiB,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACjB,MAAIC,IAAI,CAACC,KAAL,CAAWL,KAAX,MAAsBA,KAA1B,EACE,MAAM,IAAIG,KAAJ,CAAU,kCAAV,CAAN;AACH;;AACD,SAASG,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;AACpC,MAAMC,CAAC,GAAGF,MAAM,CAACG,YAAP,CAAoBF,MAApB,CAAV;AACA,MAAIG,CAAC,GAAGJ,MAAM,CAACG,YAAP,CAAoBF,MAAM,GAAG,CAA7B,CAAR;AACAG,EAAAA,CAAC,IAAI,WAAL;AACAV,EAAAA,SAAS,CAACU,CAAC,GAAGF,CAAL,EAAQ,kBAAR,CAAT;AACA,SAAOE,CAAC,GAAGF,CAAX;AACD;;AACDV,OAAO,CAACO,YAAR,GAAuBA,YAAvB;;AACA,SAASM,aAAT,CAAuBL,MAAvB,EAA+BP,KAA/B,EAAsCQ,MAAtC,EAA8C;AAC5CP,EAAAA,SAAS,CAACD,KAAD,EAAQ,kBAAR,CAAT;AACAO,EAAAA,MAAM,CAACM,YAAP,CAAoBb,KAAK,GAAG,CAAC,CAA7B,EAAgCQ,MAAhC;AACAD,EAAAA,MAAM,CAACO,aAAP,CAAqBV,IAAI,CAACC,KAAL,CAAWL,KAAK,GAAG,WAAnB,CAArB,EAAsDQ,MAAM,GAAG,CAA/D;AACA,SAAOA,MAAM,GAAG,CAAhB;AACD;;AACDT,OAAO,CAACa,aAAR,GAAwBA,aAAxB;;AACA,SAASG,aAAT,CAAuBR,MAAvB,EAA+B;AAC7B,MAAIA,MAAM,CAACS,MAAP,GAAgB,CAApB,EAAuB,OAAOT,MAAP;AACvB,MAAIU,CAAC,GAAGV,MAAM,CAACS,MAAP,GAAgB,CAAxB;AACA,MAAIE,GAAG,GAAG,CAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAAM,CAACS,MAAP,GAAgB,CAApC,EAAuCG,CAAC,EAAxC,EAA4C;AAC1CD,IAAAA,GAAG,GAAGX,MAAM,CAACY,CAAD,CAAZ;AACAZ,IAAAA,MAAM,CAACY,CAAD,CAAN,GAAYZ,MAAM,CAACU,CAAD,CAAlB;AACAV,IAAAA,MAAM,CAACU,CAAD,CAAN,GAAYC,GAAZ;AACAD,IAAAA,CAAC;AACF;;AACD,SAAOV,MAAP;AACD;;AACDR,OAAO,CAACgB,aAAR,GAAwBA,aAAxB","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\n// https://github.com/feross/buffer/blob/master/index.js#L1127\nfunction verifuint(value, max) {\n  if (typeof value !== 'number')\n    throw new Error('cannot write a non-number as a number');\n  if (value < 0)\n    throw new Error('specified a negative value for writing an unsigned value');\n  if (value > max) throw new Error('RangeError: value out of range');\n  if (Math.floor(value) !== value)\n    throw new Error('value has a fractional component');\n}\nfunction readUInt64LE(buffer, offset) {\n  const a = buffer.readUInt32LE(offset);\n  let b = buffer.readUInt32LE(offset + 4);\n  b *= 0x100000000;\n  verifuint(b + a, 0x001fffffffffffff);\n  return b + a;\n}\nexports.readUInt64LE = readUInt64LE;\nfunction writeUInt64LE(buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff);\n  buffer.writeInt32LE(value & -1, offset);\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n  return offset + 8;\n}\nexports.writeUInt64LE = writeUInt64LE;\nfunction reverseBuffer(buffer) {\n  if (buffer.length < 1) return buffer;\n  let j = buffer.length - 1;\n  let tmp = 0;\n  for (let i = 0; i < buffer.length / 2; i++) {\n    tmp = buffer[i];\n    buffer[i] = buffer[j];\n    buffer[j] = tmp;\n    j--;\n  }\n  return buffer;\n}\nexports.reverseBuffer = reverseBuffer;\n"]},"metadata":{},"sourceType":"script"}