{"ast":null,"code":"\"use strict\";\n\nvar _possibleConstructorReturn = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar sessionData_1 = require(\"./sessionData\"); // import { BLOCKSTACK_GAIA_HUB_LABEL } from '../storage/hub'\n\n\nvar authConstants_1 = require(\"./authConstants\");\n\nvar errors_1 = require(\"../errors\"); // import { Logger } from '../logger'\n\n/**\n * An abstract class representing the SessionDataStore interface.\n\n */\n\n\nvar SessionDataStore =\n/*#__PURE__*/\nfunction () {\n  function SessionDataStore(sessionOptions) {\n    _classCallCheck(this, SessionDataStore);\n\n    if (sessionOptions) {\n      var newSessionData = new sessionData_1.SessionData(sessionOptions);\n      this.setSessionData(newSessionData);\n    }\n  }\n\n  _createClass(SessionDataStore, [{\n    key: \"getSessionData\",\n    value: function getSessionData() {\n      throw new Error('Abstract class');\n    }\n    /* eslint-disable */\n\n  }, {\n    key: \"setSessionData\",\n    value: function setSessionData(session) {\n      throw new Error('Abstract class');\n    }\n  }, {\n    key: \"deleteSessionData\",\n    value: function deleteSessionData() {\n      throw new Error('Abstract class');\n    }\n  }]);\n\n  return SessionDataStore;\n}();\n\nexports.SessionDataStore = SessionDataStore;\n/**\n * Stores session data in the instance of this class.\n * @ignore\n */\n\nvar InstanceDataStore =\n/*#__PURE__*/\nfunction (_SessionDataStore) {\n  _inherits(InstanceDataStore, _SessionDataStore);\n\n  function InstanceDataStore(sessionOptions) {\n    var _this;\n\n    _classCallCheck(this, InstanceDataStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InstanceDataStore).call(this, sessionOptions));\n\n    if (!_this.sessionData) {\n      _this.setSessionData(new sessionData_1.SessionData({}));\n    }\n\n    return _this;\n  }\n\n  _createClass(InstanceDataStore, [{\n    key: \"getSessionData\",\n    value: function getSessionData() {\n      if (!this.sessionData) {\n        throw new errors_1.NoSessionDataError('No session data was found.');\n      }\n\n      return this.sessionData;\n    }\n  }, {\n    key: \"setSessionData\",\n    value: function setSessionData(session) {\n      this.sessionData = session;\n      return true;\n    }\n  }, {\n    key: \"deleteSessionData\",\n    value: function deleteSessionData() {\n      this.setSessionData(new sessionData_1.SessionData({}));\n      return true;\n    }\n  }]);\n\n  return InstanceDataStore;\n}(SessionDataStore);\n\nexports.InstanceDataStore = InstanceDataStore;\n/**\n * Stores session data in browser a localStorage entry.\n * @ignore\n */\n\nvar LocalStorageStore =\n/*#__PURE__*/\nfunction (_SessionDataStore2) {\n  _inherits(LocalStorageStore, _SessionDataStore2);\n\n  function LocalStorageStore(sessionOptions) {\n    var _this2;\n\n    _classCallCheck(this, LocalStorageStore);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(LocalStorageStore).call(this, sessionOptions));\n\n    if (sessionOptions && sessionOptions.storeOptions && sessionOptions.storeOptions.localStorageKey && typeof sessionOptions.storeOptions.localStorageKey === 'string') {\n      _this2.key = sessionOptions.storeOptions.localStorageKey;\n    } else {\n      _this2.key = authConstants_1.LOCALSTORAGE_SESSION_KEY;\n    }\n\n    var data = localStorage.getItem(_this2.key);\n\n    if (!data) {\n      var sessionData = new sessionData_1.SessionData({});\n\n      _this2.setSessionData(sessionData);\n    }\n\n    return _this2;\n  }\n\n  _createClass(LocalStorageStore, [{\n    key: \"getSessionData\",\n    value: function getSessionData() {\n      var data = localStorage.getItem(this.key);\n\n      if (!data) {\n        throw new errors_1.NoSessionDataError('No session data was found in localStorage');\n      }\n\n      var dataJSON = JSON.parse(data);\n      return sessionData_1.SessionData.fromJSON(dataJSON);\n    }\n  }, {\n    key: \"setSessionData\",\n    value: function setSessionData(session) {\n      localStorage.setItem(this.key, session.toString());\n      return true;\n    }\n  }, {\n    key: \"deleteSessionData\",\n    value: function deleteSessionData() {\n      localStorage.removeItem(this.key);\n      this.setSessionData(new sessionData_1.SessionData({}));\n      return true;\n    }\n  }]);\n\n  return LocalStorageStore;\n}(SessionDataStore);\n\nexports.LocalStorageStore = LocalStorageStore;","map":{"version":3,"sources":["../../src/auth/sessionStore.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sessionData_1 = require(\"./sessionData\");\n// import { BLOCKSTACK_GAIA_HUB_LABEL } from '../storage/hub'\nconst authConstants_1 = require(\"./authConstants\");\nconst errors_1 = require(\"../errors\");\n// import { Logger } from '../logger'\n/**\n * An abstract class representing the SessionDataStore interface.\n\n */\nclass SessionDataStore {\n    constructor(sessionOptions) {\n        if (sessionOptions) {\n            const newSessionData = new sessionData_1.SessionData(sessionOptions);\n            this.setSessionData(newSessionData);\n        }\n    }\n    getSessionData() {\n        throw new Error('Abstract class');\n    }\n    /* eslint-disable */\n    setSessionData(session) {\n        throw new Error('Abstract class');\n    }\n    deleteSessionData() {\n        throw new Error('Abstract class');\n    }\n}\nexports.SessionDataStore = SessionDataStore;\n/**\n * Stores session data in the instance of this class.\n * @ignore\n */\nclass InstanceDataStore extends SessionDataStore {\n    constructor(sessionOptions) {\n        super(sessionOptions);\n        if (!this.sessionData) {\n            this.setSessionData(new sessionData_1.SessionData({}));\n        }\n    }\n    getSessionData() {\n        if (!this.sessionData) {\n            throw new errors_1.NoSessionDataError('No session data was found.');\n        }\n        return this.sessionData;\n    }\n    setSessionData(session) {\n        this.sessionData = session;\n        return true;\n    }\n    deleteSessionData() {\n        this.setSessionData(new sessionData_1.SessionData({}));\n        return true;\n    }\n}\nexports.InstanceDataStore = InstanceDataStore;\n/**\n * Stores session data in browser a localStorage entry.\n * @ignore\n */\nclass LocalStorageStore extends SessionDataStore {\n    constructor(sessionOptions) {\n        super(sessionOptions);\n        if (sessionOptions\n            && sessionOptions.storeOptions\n            && sessionOptions.storeOptions.localStorageKey\n            && (typeof sessionOptions.storeOptions.localStorageKey === 'string')) {\n            this.key = sessionOptions.storeOptions.localStorageKey;\n        }\n        else {\n            this.key = authConstants_1.LOCALSTORAGE_SESSION_KEY;\n        }\n        const data = localStorage.getItem(this.key);\n        if (!data) {\n            const sessionData = new sessionData_1.SessionData({});\n            this.setSessionData(sessionData);\n        }\n    }\n    getSessionData() {\n        const data = localStorage.getItem(this.key);\n        if (!data) {\n            throw new errors_1.NoSessionDataError('No session data was found in localStorage');\n        }\n        const dataJSON = JSON.parse(data);\n        return sessionData_1.SessionData.fromJSON(dataJSON);\n    }\n    setSessionData(session) {\n        localStorage.setItem(this.key, session.toString());\n        return true;\n    }\n    deleteSessionData() {\n        localStorage.removeItem(this.key);\n        this.setSessionData(new sessionData_1.SessionData({}));\n        return true;\n    }\n}\nexports.LocalStorageStore = LocalStorageStore;\n//# sourceMappingURL=sessionStore.js.map"]},"metadata":{},"sourceType":"script"}