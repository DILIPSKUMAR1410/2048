{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar cheerio = require(\"cheerio\");\n\nvar service_1 = require(\"./service\");\n\nvar LinkedIn =\n/*#__PURE__*/\nfunction (_service_1$Service) {\n  _inherits(LinkedIn, _service_1$Service);\n\n  function LinkedIn() {\n    _classCallCheck(this, LinkedIn);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LinkedIn).apply(this, arguments));\n  }\n\n  _createClass(LinkedIn, null, [{\n    key: \"getBaseUrls\",\n    value: function getBaseUrls() {\n      var baseUrls = ['https://www.linkedin.com/feed/update/', 'http://www.linkedin.com/feed/update/', 'www.linkedin.com/feed/update/'];\n      return baseUrls;\n    }\n  }, {\n    key: \"getProofUrl\",\n    value: function getProofUrl(proof) {\n      var baseUrls = this.getBaseUrls();\n      var proofUrl = proof.proof_url.toLowerCase();\n      proofUrl = _get(_getPrototypeOf(LinkedIn), \"prefixScheme\", this).call(this, proofUrl);\n\n      for (var i = 0; i < baseUrls.length; i++) {\n        if (proofUrl.startsWith(\"\".concat(baseUrls[i]))) {\n          return proofUrl;\n        }\n      }\n\n      throw new Error(\"Proof url \".concat(proof.proof_url, \" is not valid for service \").concat(proof.service));\n    }\n  }, {\n    key: \"normalizeUrl\",\n    value: function normalizeUrl(proof) {\n      return '';\n    }\n  }, {\n    key: \"shouldValidateIdentityInBody\",\n    value: function shouldValidateIdentityInBody() {\n      return true;\n    }\n  }, {\n    key: \"getProofIdentity\",\n    value: function getProofIdentity(searchText) {\n      var $ = cheerio.load(searchText);\n      var profileLink = $('body > main header a');\n\n      if (profileLink !== undefined) {\n        if (profileLink.attr('href') === undefined) {\n          return '';\n        }\n\n        var url = profileLink.attr('href'); // Parse URL for identifier\n\n        var identifier = url.split('?').shift().split('/').pop();\n        return identifier;\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: \"getProofStatement\",\n    value: function getProofStatement(searchText) {\n      var $ = cheerio.load(searchText);\n      var postContent = $('head > meta[property=\"og:title\"]');\n      var statement = '';\n\n      if (postContent !== undefined) {\n        statement = postContent.attr('content');\n      }\n\n      return statement;\n    }\n  }]);\n\n  return LinkedIn;\n}(service_1.Service);\n\nexports.LinkedIn = LinkedIn;","map":{"version":3,"sources":["../../../src/profiles/services/linkedIn.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;IAEM,Q;;;;;;;;;;;;;kCACc;AAChB,UAAM,QAAQ,GAAG,CACf,uCADe,EAEf,sCAFe,EAGf,+BAHe,CAAjB;AAKA,aAAO,QAAP;AACD;;;gCAEkB,K,EAAU;AAC3B,UAAM,QAAQ,GAAG,KAAK,WAAL,EAAjB;AAEA,UAAI,QAAQ,GAAG,KAAK,CAAC,SAAN,CAAgB,WAAhB,EAAf;AACA,MAAA,QAAQ,oEAAsB,QAAtB,CAAR;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,YAAI,QAAQ,CAAC,UAAT,WAAuB,QAAQ,CAAC,CAAD,CAA/B,EAAJ,EAA2C;AACzC,iBAAO,QAAP;AACD;AACF;;AACD,YAAM,IAAI,KAAJ,qBAAuB,KAAK,CAAC,SAA7B,uCAAmE,KAAK,CAAC,OAAzE,EAAN;AACD;;;iCAEmB,K,EAAU;AAC5B,aAAO,EAAP;AACD;;;mDAEkC;AACjC,aAAO,IAAP;AACD;;;qCAEuB,U,EAAkB;AACxC,UAAM,CAAC,GAAG,OAAO,CAAC,IAAR,CAAa,UAAb,CAAV;AACA,UAAM,WAAW,GAAG,CAAC,CAAC,sBAAD,CAArB;;AAEA,UAAI,WAAW,KAAK,SAApB,EAA+B;AAC7B,YAAI,WAAW,CAAC,IAAZ,CAAiB,MAAjB,MAA6B,SAAjC,EAA4C;AAC1C,iBAAO,EAAP;AACD;;AACD,YAAM,GAAG,GAAG,WAAW,CAAC,IAAZ,CAAiB,MAAjB,CAAZ,CAJ6B,CAM7B;;AACA,YAAM,UAAU,GAAG,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAe,KAAf,GAAuB,KAAvB,CAA6B,GAA7B,EAAkC,GAAlC,EAAnB;AAEA,eAAO,UAAP;AACD,OAVD,MAUO;AACL,eAAO,EAAP;AACD;AACF;;;sCAEwB,U,EAAkB;AACzC,UAAM,CAAC,GAAG,OAAO,CAAC,IAAR,CAAa,UAAb,CAAV;AACA,UAAM,WAAW,GAAG,CAAC,CAAC,kCAAD,CAArB;AACA,UAAI,SAAS,GAAG,EAAhB;;AAEA,UAAI,WAAW,KAAK,SAApB,EAA+B;AAC7B,QAAA,SAAS,GAAG,WAAW,CAAC,IAAZ,CAAiB,SAAjB,CAAZ;AACD;;AAED,aAAO,SAAP;AACD;;;;EA7DoB,SAAA,CAAA,O;;AAgEd,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cheerio = require(\"cheerio\");\nconst service_1 = require(\"./service\");\nclass LinkedIn extends service_1.Service {\n    static getBaseUrls() {\n        const baseUrls = [\n            'https://www.linkedin.com/feed/update/',\n            'http://www.linkedin.com/feed/update/',\n            'www.linkedin.com/feed/update/'\n        ];\n        return baseUrls;\n    }\n    static getProofUrl(proof) {\n        const baseUrls = this.getBaseUrls();\n        let proofUrl = proof.proof_url.toLowerCase();\n        proofUrl = super.prefixScheme(proofUrl);\n        for (let i = 0; i < baseUrls.length; i++) {\n            if (proofUrl.startsWith(`${baseUrls[i]}`)) {\n                return proofUrl;\n            }\n        }\n        throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n    }\n    static normalizeUrl(proof) {\n        return '';\n    }\n    static shouldValidateIdentityInBody() {\n        return true;\n    }\n    static getProofIdentity(searchText) {\n        const $ = cheerio.load(searchText);\n        const profileLink = $('body > main header a');\n        if (profileLink !== undefined) {\n            if (profileLink.attr('href') === undefined) {\n                return '';\n            }\n            const url = profileLink.attr('href');\n            // Parse URL for identifier\n            const identifier = url.split('?').shift().split('/').pop();\n            return identifier;\n        }\n        else {\n            return '';\n        }\n    }\n    static getProofStatement(searchText) {\n        const $ = cheerio.load(searchText);\n        const postContent = $('head > meta[property=\"og:title\"]');\n        let statement = '';\n        if (postContent !== undefined) {\n            statement = postContent.attr('content');\n        }\n        return statement;\n    }\n}\nexports.LinkedIn = LinkedIn;\n//# sourceMappingURL=linkedIn.js.map"]},"metadata":{},"sourceType":"script"}