{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar profileZoneFiles_1 = require(\"./profileZoneFiles\");\n\nvar config_1 = require(\"../config\");\n\nvar fetchUtil_1 = require(\"../fetchUtil\");\n/**\n * Look up a user profile by blockstack ID\n *\n * @param {string} username - The Blockstack ID of the profile to look up\n * @param {string} [zoneFileLookupURL=null] - The URL\n * to use for zonefile lookup. If falsey, lookupProfile will use the\n * blockstack.js [[getNameInfo]] function.\n * @returns {Promise} that resolves to a profile object\n */\n\n\nfunction lookupProfile(username, zoneFileLookupURL) {\n  if (!username) {\n    return Promise.reject();\n  }\n\n  var lookupPromise;\n\n  if (zoneFileLookupURL) {\n    var url = \"\".concat(zoneFileLookupURL.replace(/\\/$/, ''), \"/\").concat(username);\n    lookupPromise = fetchUtil_1.fetchPrivate(url).then(function (response) {\n      return response.json();\n    });\n  } else {\n    lookupPromise = config_1.config.network.getNameInfo(username);\n  }\n\n  return lookupPromise.then(function (responseJSON) {\n    if (responseJSON.hasOwnProperty('zonefile') && responseJSON.hasOwnProperty('address')) {\n      return profileZoneFiles_1.resolveZoneFileToProfile(responseJSON.zonefile, responseJSON.address);\n    } else {\n      throw new Error('Invalid zonefile lookup response: did not contain `address`' + ' or `zonefile` field');\n    }\n  });\n}\n\nexports.lookupProfile = lookupProfile;","map":{"version":3,"sources":["../../src/profiles/profileLookup.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAEA;;;;;;;;;;;AASA,SAAgB,aAAhB,CAA8B,QAA9B,EAAgD,iBAAhD,EAA0E;AACxE,MAAI,CAAC,QAAL,EAAe;AACb,WAAO,OAAO,CAAC,MAAR,EAAP;AACD;;AACD,MAAI,aAAJ;;AACA,MAAI,iBAAJ,EAAuB;AACrB,QAAM,GAAG,aAAM,iBAAiB,CAAC,OAAlB,CAA0B,KAA1B,EAAiC,EAAjC,CAAN,cAA8C,QAA9C,CAAT;AACA,IAAA,aAAa,GAAG,WAAA,CAAA,YAAA,CAAa,GAAb,EACb,IADa,CACR,UAAA,QAAQ;AAAA,aAAI,QAAQ,CAAC,IAAT,EAAJ;AAAA,KADA,CAAhB;AAED,GAJD,MAIO;AACL,IAAA,aAAa,GAAG,QAAA,CAAA,MAAA,CAAO,OAAP,CAAe,WAAf,CAA2B,QAA3B,CAAhB;AACD;;AACD,SAAO,aAAa,CACjB,IADI,CACC,UAAC,YAAD,EAAiB;AACrB,QAAI,YAAY,CAAC,cAAb,CAA4B,UAA5B,KACG,YAAY,CAAC,cAAb,CAA4B,SAA5B,CADP,EAC+C;AAC7C,aAAO,kBAAA,CAAA,wBAAA,CAAyB,YAAY,CAAC,QAAtC,EAAgD,YAAY,CAAC,OAA7D,CAAP;AACD,KAHD,MAGO;AACL,YAAM,IAAI,KAAJ,CAAU,gEACE,sBADZ,CAAN;AAED;AACF,GATI,CAAP;AAUD;;AAtBD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst profileZoneFiles_1 = require(\"./profileZoneFiles\");\nconst config_1 = require(\"../config\");\nconst fetchUtil_1 = require(\"../fetchUtil\");\n/**\n * Look up a user profile by blockstack ID\n *\n * @param {string} username - The Blockstack ID of the profile to look up\n * @param {string} [zoneFileLookupURL=null] - The URL\n * to use for zonefile lookup. If falsey, lookupProfile will use the\n * blockstack.js [[getNameInfo]] function.\n * @returns {Promise} that resolves to a profile object\n */\nfunction lookupProfile(username, zoneFileLookupURL) {\n    if (!username) {\n        return Promise.reject();\n    }\n    let lookupPromise;\n    if (zoneFileLookupURL) {\n        const url = `${zoneFileLookupURL.replace(/\\/$/, '')}/${username}`;\n        lookupPromise = fetchUtil_1.fetchPrivate(url)\n            .then(response => response.json());\n    }\n    else {\n        lookupPromise = config_1.config.network.getNameInfo(username);\n    }\n    return lookupPromise\n        .then((responseJSON) => {\n        if (responseJSON.hasOwnProperty('zonefile')\n            && responseJSON.hasOwnProperty('address')) {\n            return profileZoneFiles_1.resolveZoneFileToProfile(responseJSON.zonefile, responseJSON.address);\n        }\n        else {\n            throw new Error('Invalid zonefile lookup response: did not contain `address`'\n                + ' or `zonefile` field');\n        }\n    });\n}\nexports.lookupProfile = lookupProfile;\n//# sourceMappingURL=profileLookup.js.map"]},"metadata":{},"sourceType":"script"}