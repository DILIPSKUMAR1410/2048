{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar bcrypto = require('../crypto');\n\nvar networks_1 = require('../networks');\n\nvar bscript = require('../script');\n\nvar lazy = require('./lazy');\n\nvar typef = require('typeforce');\n\nvar OPS = bscript.OPS;\n\nvar bech32 = require('bech32');\n\nvar EMPTY_BUFFER = Buffer.alloc(0);\n\nfunction stacksEqual(a, b) {\n  if (a.length !== b.length) return false;\n  return a.every(function (x, i) {\n    return x.equals(b[i]);\n  });\n} // input: <>\n// witness: [redeemScriptSig ...] {redeemScript}\n// output: OP_0 {sha256(redeemScript)}\n\n\nfunction p2wsh(a, opts) {\n  if (!a.address && !a.hash && !a.output && !a.redeem && !a.witness) throw new TypeError('Not enough data');\n  opts = Object.assign({\n    validate: true\n  }, opts || {});\n  typef({\n    network: typef.maybe(typef.Object),\n    address: typef.maybe(typef.String),\n    hash: typef.maybe(typef.BufferN(32)),\n    output: typef.maybe(typef.BufferN(34)),\n    redeem: typef.maybe({\n      input: typef.maybe(typef.Buffer),\n      network: typef.maybe(typef.Object),\n      output: typef.maybe(typef.Buffer),\n      witness: typef.maybe(typef.arrayOf(typef.Buffer))\n    }),\n    input: typef.maybe(typef.BufferN(0)),\n    witness: typef.maybe(typef.arrayOf(typef.Buffer))\n  }, a);\n\n  var _address = lazy.value(function () {\n    var result = bech32.decode(a.address);\n    var version = result.words.shift();\n    var data = bech32.fromWords(result.words);\n    return {\n      version: version,\n      prefix: result.prefix,\n      data: Buffer.from(data)\n    };\n  });\n\n  var _rchunks = lazy.value(function () {\n    return bscript.decompile(a.redeem.input);\n  });\n\n  var network = a.network;\n\n  if (!network) {\n    network = a.redeem && a.redeem.network || networks_1.bitcoin;\n  }\n\n  var o = {\n    network: network\n  };\n  lazy.prop(o, 'address', function () {\n    if (!o.hash) return;\n    var words = bech32.toWords(o.hash);\n    words.unshift(0x00);\n    return bech32.encode(network.bech32, words);\n  });\n  lazy.prop(o, 'hash', function () {\n    if (a.output) return a.output.slice(2);\n    if (a.address) return _address().data;\n    if (o.redeem && o.redeem.output) return bcrypto.sha256(o.redeem.output);\n  });\n  lazy.prop(o, 'output', function () {\n    if (!o.hash) return;\n    return bscript.compile([OPS.OP_0, o.hash]);\n  });\n  lazy.prop(o, 'redeem', function () {\n    if (!a.witness) return;\n    return {\n      output: a.witness[a.witness.length - 1],\n      input: EMPTY_BUFFER,\n      witness: a.witness.slice(0, -1)\n    };\n  });\n  lazy.prop(o, 'input', function () {\n    if (!o.witness) return;\n    return EMPTY_BUFFER;\n  });\n  lazy.prop(o, 'witness', function () {\n    // transform redeem input to witness stack?\n    if (a.redeem && a.redeem.input && a.redeem.input.length > 0 && a.redeem.output && a.redeem.output.length > 0) {\n      var stack = bscript.toStack(_rchunks()); // assign, and blank the existing input\n\n      o.redeem = Object.assign({\n        witness: stack\n      }, a.redeem);\n      o.redeem.input = EMPTY_BUFFER;\n      return [].concat(stack, a.redeem.output);\n    }\n\n    if (!a.redeem) return;\n    if (!a.redeem.output) return;\n    if (!a.redeem.witness) return;\n    return [].concat(a.redeem.witness, a.redeem.output);\n  });\n  lazy.prop(o, 'name', function () {\n    var nameParts = ['p2wsh'];\n    if (o.redeem !== undefined) nameParts.push(o.redeem.name);\n    return nameParts.join('-');\n  }); // extended validation\n\n  if (opts.validate) {\n    var hash = Buffer.from([]);\n\n    if (a.address) {\n      if (_address().prefix !== network.bech32) throw new TypeError('Invalid prefix or Network mismatch');\n      if (_address().version !== 0x00) throw new TypeError('Invalid address version');\n      if (_address().data.length !== 32) throw new TypeError('Invalid address data');\n      hash = _address().data;\n    }\n\n    if (a.hash) {\n      if (hash.length > 0 && !hash.equals(a.hash)) throw new TypeError('Hash mismatch');else hash = a.hash;\n    }\n\n    if (a.output) {\n      if (a.output.length !== 34 || a.output[0] !== OPS.OP_0 || a.output[1] !== 0x20) throw new TypeError('Output is invalid');\n      var hash2 = a.output.slice(2);\n      if (hash.length > 0 && !hash.equals(hash2)) throw new TypeError('Hash mismatch');else hash = hash2;\n    }\n\n    if (a.redeem) {\n      if (a.redeem.network && a.redeem.network !== network) throw new TypeError('Network mismatch'); // is there two redeem sources?\n\n      if (a.redeem.input && a.redeem.input.length > 0 && a.redeem.witness && a.redeem.witness.length > 0) throw new TypeError('Ambiguous witness source'); // is the redeem output non-empty?\n\n      if (a.redeem.output) {\n        if (bscript.decompile(a.redeem.output).length === 0) throw new TypeError('Redeem.output is invalid'); // match hash against other sources\n\n        var _hash = bcrypto.sha256(a.redeem.output);\n\n        if (hash.length > 0 && !hash.equals(_hash)) throw new TypeError('Hash mismatch');else hash = _hash;\n      }\n\n      if (a.redeem.input && !bscript.isPushOnly(_rchunks())) throw new TypeError('Non push-only scriptSig');\n      if (a.witness && a.redeem.witness && !stacksEqual(a.witness, a.redeem.witness)) throw new TypeError('Witness and redeem.witness mismatch');\n    }\n\n    if (a.witness) {\n      if (a.redeem && a.redeem.output && !a.redeem.output.equals(a.witness[a.witness.length - 1])) throw new TypeError('Witness and redeem.output mismatch');\n    }\n  }\n\n  return Object.assign(o, a);\n}\n\nexports.p2wsh = p2wsh;","map":{"version":3,"sources":["/home/aashan/2048/node_modules/bitcoinjs-lib/src/payments/p2wsh.js"],"names":["Object","defineProperty","exports","value","bcrypto","require","networks_1","bscript","lazy","typef","OPS","bech32","EMPTY_BUFFER","Buffer","alloc","stacksEqual","a","b","length","every","x","i","equals","p2wsh","opts","address","hash","output","redeem","witness","TypeError","assign","validate","network","maybe","String","BufferN","input","arrayOf","_address","result","decode","version","words","shift","data","fromWords","prefix","from","_rchunks","decompile","bitcoin","o","prop","toWords","unshift","encode","slice","sha256","compile","OP_0","stack","toStack","concat","nameParts","undefined","push","name","join","hash2","isPushOnly"],"mappings":"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","sourcesContent":["'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nconst bcrypto = require('../crypto');\nconst networks_1 = require('../networks');\nconst bscript = require('../script');\nconst lazy = require('./lazy');\nconst typef = require('typeforce');\nconst OPS = bscript.OPS;\nconst bech32 = require('bech32');\nconst EMPTY_BUFFER = Buffer.alloc(0);\nfunction stacksEqual(a, b) {\n  if (a.length !== b.length) return false;\n  return a.every((x, i) => {\n    return x.equals(b[i]);\n  });\n}\n// input: <>\n// witness: [redeemScriptSig ...] {redeemScript}\n// output: OP_0 {sha256(redeemScript)}\nfunction p2wsh(a, opts) {\n  if (!a.address && !a.hash && !a.output && !a.redeem && !a.witness)\n    throw new TypeError('Not enough data');\n  opts = Object.assign({ validate: true }, opts || {});\n  typef(\n    {\n      network: typef.maybe(typef.Object),\n      address: typef.maybe(typef.String),\n      hash: typef.maybe(typef.BufferN(32)),\n      output: typef.maybe(typef.BufferN(34)),\n      redeem: typef.maybe({\n        input: typef.maybe(typef.Buffer),\n        network: typef.maybe(typef.Object),\n        output: typef.maybe(typef.Buffer),\n        witness: typef.maybe(typef.arrayOf(typef.Buffer)),\n      }),\n      input: typef.maybe(typef.BufferN(0)),\n      witness: typef.maybe(typef.arrayOf(typef.Buffer)),\n    },\n    a,\n  );\n  const _address = lazy.value(() => {\n    const result = bech32.decode(a.address);\n    const version = result.words.shift();\n    const data = bech32.fromWords(result.words);\n    return {\n      version,\n      prefix: result.prefix,\n      data: Buffer.from(data),\n    };\n  });\n  const _rchunks = lazy.value(() => {\n    return bscript.decompile(a.redeem.input);\n  });\n  let network = a.network;\n  if (!network) {\n    network = (a.redeem && a.redeem.network) || networks_1.bitcoin;\n  }\n  const o = { network };\n  lazy.prop(o, 'address', () => {\n    if (!o.hash) return;\n    const words = bech32.toWords(o.hash);\n    words.unshift(0x00);\n    return bech32.encode(network.bech32, words);\n  });\n  lazy.prop(o, 'hash', () => {\n    if (a.output) return a.output.slice(2);\n    if (a.address) return _address().data;\n    if (o.redeem && o.redeem.output) return bcrypto.sha256(o.redeem.output);\n  });\n  lazy.prop(o, 'output', () => {\n    if (!o.hash) return;\n    return bscript.compile([OPS.OP_0, o.hash]);\n  });\n  lazy.prop(o, 'redeem', () => {\n    if (!a.witness) return;\n    return {\n      output: a.witness[a.witness.length - 1],\n      input: EMPTY_BUFFER,\n      witness: a.witness.slice(0, -1),\n    };\n  });\n  lazy.prop(o, 'input', () => {\n    if (!o.witness) return;\n    return EMPTY_BUFFER;\n  });\n  lazy.prop(o, 'witness', () => {\n    // transform redeem input to witness stack?\n    if (\n      a.redeem &&\n      a.redeem.input &&\n      a.redeem.input.length > 0 &&\n      a.redeem.output &&\n      a.redeem.output.length > 0\n    ) {\n      const stack = bscript.toStack(_rchunks());\n      // assign, and blank the existing input\n      o.redeem = Object.assign({ witness: stack }, a.redeem);\n      o.redeem.input = EMPTY_BUFFER;\n      return [].concat(stack, a.redeem.output);\n    }\n    if (!a.redeem) return;\n    if (!a.redeem.output) return;\n    if (!a.redeem.witness) return;\n    return [].concat(a.redeem.witness, a.redeem.output);\n  });\n  lazy.prop(o, 'name', () => {\n    const nameParts = ['p2wsh'];\n    if (o.redeem !== undefined) nameParts.push(o.redeem.name);\n    return nameParts.join('-');\n  });\n  // extended validation\n  if (opts.validate) {\n    let hash = Buffer.from([]);\n    if (a.address) {\n      if (_address().prefix !== network.bech32)\n        throw new TypeError('Invalid prefix or Network mismatch');\n      if (_address().version !== 0x00)\n        throw new TypeError('Invalid address version');\n      if (_address().data.length !== 32)\n        throw new TypeError('Invalid address data');\n      hash = _address().data;\n    }\n    if (a.hash) {\n      if (hash.length > 0 && !hash.equals(a.hash))\n        throw new TypeError('Hash mismatch');\n      else hash = a.hash;\n    }\n    if (a.output) {\n      if (\n        a.output.length !== 34 ||\n        a.output[0] !== OPS.OP_0 ||\n        a.output[1] !== 0x20\n      )\n        throw new TypeError('Output is invalid');\n      const hash2 = a.output.slice(2);\n      if (hash.length > 0 && !hash.equals(hash2))\n        throw new TypeError('Hash mismatch');\n      else hash = hash2;\n    }\n    if (a.redeem) {\n      if (a.redeem.network && a.redeem.network !== network)\n        throw new TypeError('Network mismatch');\n      // is there two redeem sources?\n      if (\n        a.redeem.input &&\n        a.redeem.input.length > 0 &&\n        a.redeem.witness &&\n        a.redeem.witness.length > 0\n      )\n        throw new TypeError('Ambiguous witness source');\n      // is the redeem output non-empty?\n      if (a.redeem.output) {\n        if (bscript.decompile(a.redeem.output).length === 0)\n          throw new TypeError('Redeem.output is invalid');\n        // match hash against other sources\n        const hash2 = bcrypto.sha256(a.redeem.output);\n        if (hash.length > 0 && !hash.equals(hash2))\n          throw new TypeError('Hash mismatch');\n        else hash = hash2;\n      }\n      if (a.redeem.input && !bscript.isPushOnly(_rchunks()))\n        throw new TypeError('Non push-only scriptSig');\n      if (\n        a.witness &&\n        a.redeem.witness &&\n        !stacksEqual(a.witness, a.redeem.witness)\n      )\n        throw new TypeError('Witness and redeem.witness mismatch');\n    }\n    if (a.witness) {\n      if (\n        a.redeem &&\n        a.redeem.output &&\n        !a.redeem.output.equals(a.witness[a.witness.length - 1])\n      )\n        throw new TypeError('Witness and redeem.output mismatch');\n    }\n  }\n  return Object.assign(o, a);\n}\nexports.p2wsh = p2wsh;\n"]},"metadata":{},"sourceType":"script"}