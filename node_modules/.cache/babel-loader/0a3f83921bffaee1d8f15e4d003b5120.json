{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errors_1 = require(\"../errors\");\n\nvar SESSION_VERSION = '1.0.0';\n/**\n * @ignore\n */\n\nvar SessionData =\n/*#__PURE__*/\nfunction () {\n  function SessionData(options) {\n    _classCallCheck(this, SessionData);\n\n    this.version = SESSION_VERSION;\n    this.appPrivateKey = options.appPrivateKey;\n    this.identityAddress = options.identityAddress;\n    this.username = options.username;\n    this.coreNode = options.coreNode;\n    this.hubUrl = options.hubUrl;\n    this.userData = options.userData;\n    this.transitKey = options.transitKey;\n  }\n\n  _createClass(SessionData, [{\n    key: \"getGaiaHubConfig\",\n    value: function getGaiaHubConfig() {\n      return this.userData && this.userData.gaiaHubConfig;\n    }\n  }, {\n    key: \"setGaiaHubConfig\",\n    value: function setGaiaHubConfig(config) {\n      this.userData.gaiaHubConfig = config;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return JSON.stringify(this);\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (json.version !== SESSION_VERSION) {\n        throw new errors_1.InvalidStateError(\"JSON data version \".concat(json.version, \" not supported by SessionData\"));\n      }\n\n      var options = {\n        appPrivateKey: json.appPrivateKey,\n        identityAddress: json.identityAddress,\n        username: json.username,\n        coreNode: json.coreNode,\n        hubUrl: json.hubUrl,\n        userData: json.userData,\n        transitKey: json.transitKey\n      };\n      return new SessionData(options);\n    }\n  }]);\n\n  return SessionData;\n}();\n\nexports.SessionData = SessionData;","map":{"version":3,"sources":["../../src/auth/sessionData.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAGA,IAAM,eAAe,GAAG,OAAxB;AAgBA;;;;IAGa,W;;;AAmBX,uBAAY,OAAZ,EAAmC;AAAA;;AACjC,SAAK,OAAL,GAAe,eAAf;AACA,SAAK,aAAL,GAAqB,OAAO,CAAC,aAA7B;AACA,SAAK,eAAL,GAAuB,OAAO,CAAC,eAA/B;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,MAAL,GAAc,OAAO,CAAC,MAAtB;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACD;;;;uCAEe;AACd,aAAO,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc,aAAtC;AACD;;;qCAEgB,M,EAAqB;AACpC,WAAK,QAAL,CAAc,aAAd,GAA8B,MAA9B;AACD;;;+BAkBO;AACN,aAAO,IAAI,CAAC,SAAL,CAAe,IAAf,CAAP;AACD;;;6BAlBe,I,EAAS;AACvB,UAAI,IAAI,CAAC,OAAL,KAAiB,eAArB,EAAsC;AACpC,cAAM,IAAI,QAAA,CAAA,iBAAJ,6BAA2C,IAAI,CAAC,OAAhD,mCAAN;AACD;;AACD,UAAM,OAAO,GAAmB;AAC9B,QAAA,aAAa,EAAE,IAAI,CAAC,aADU;AAE9B,QAAA,eAAe,EAAE,IAAI,CAAC,eAFQ;AAG9B,QAAA,QAAQ,EAAE,IAAI,CAAC,QAHe;AAI9B,QAAA,QAAQ,EAAE,IAAI,CAAC,QAJe;AAK9B,QAAA,MAAM,EAAE,IAAI,CAAC,MALiB;AAM9B,QAAA,QAAQ,EAAE,IAAI,CAAC,QANe;AAO9B,QAAA,UAAU,EAAE,IAAI,CAAC;AAPa,OAAhC;AASA,aAAO,IAAI,WAAJ,CAAgB,OAAhB,CAAP;AACD;;;;;;AApDH,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"../errors\");\nconst SESSION_VERSION = '1.0.0';\n/**\n * @ignore\n */\nclass SessionData {\n    constructor(options) {\n        this.version = SESSION_VERSION;\n        this.appPrivateKey = options.appPrivateKey;\n        this.identityAddress = options.identityAddress;\n        this.username = options.username;\n        this.coreNode = options.coreNode;\n        this.hubUrl = options.hubUrl;\n        this.userData = options.userData;\n        this.transitKey = options.transitKey;\n    }\n    getGaiaHubConfig() {\n        return this.userData && this.userData.gaiaHubConfig;\n    }\n    setGaiaHubConfig(config) {\n        this.userData.gaiaHubConfig = config;\n    }\n    static fromJSON(json) {\n        if (json.version !== SESSION_VERSION) {\n            throw new errors_1.InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\n        }\n        const options = {\n            appPrivateKey: json.appPrivateKey,\n            identityAddress: json.identityAddress,\n            username: json.username,\n            coreNode: json.coreNode,\n            hubUrl: json.hubUrl,\n            userData: json.userData,\n            transitKey: json.transitKey\n        };\n        return new SessionData(options);\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n}\nexports.SessionData = SessionData;\n//# sourceMappingURL=sessionData.js.map"]},"metadata":{},"sourceType":"script"}