{"ast":null,"code":"function processMove(state, accessors) {\n  if (!canMove(state.squares, accessors)) {\n    return {\n      squares: state.squares,\n      isMoved: false,\n      isStarted: state.isStarted,\n      score: state.score\n    };\n  }\n\n  var squares = state.squares.map(function (arr) {\n    return arr.map(function (square) {\n      return square ? square.copy() : null;\n    });\n  });\n  var score = state.score;\n  var length = squares.length;\n  var get = accessors.get;\n  var set = accessors.set;\n\n  for (var i = 0; i !== length; i++) {\n    var row = getRowObject(length);\n\n    for (var j = length - 1; j >= 0; j--) {\n      var item = get(squares, i, j);\n\n      if (item) {\n        item.isNew = false;\n        item.isMerged = false;\n        var index = row.getLastNonOccupiedIndex();\n\n        if (row.canMerge(item)) {\n          row.merge();\n          score = score + row.mergedSum;\n        } else {\n          row.occupied++;\n          row.items[index] = item;\n        }\n      }\n    }\n\n    for (var _j = 0; _j !== length; _j++) {\n      set(squares, i, _j, row.items[_j]);\n    }\n  }\n\n  return {\n    squares: squares,\n    isMoved: true,\n    isStarted: true,\n    score: score\n  };\n}\n\nfunction canMove(squares, accessors) {\n  var length = squares.length;\n  var get = accessors.get;\n\n  for (var i = 0; i !== length; i++) {\n    var j = 0;\n\n    while (j < length - 1) {\n      var startItem = get(squares, i, j);\n      var endItem = get(squares, i, j + 1);\n\n      if (!startItem) {\n        j++;\n        continue;\n      }\n\n      if (!endItem) {\n        return true;\n      }\n\n      if (startItem.number === endItem.number) {\n        return true;\n      }\n\n      j++;\n    }\n  }\n\n  return false;\n}\n\nfunction getRowObject(length) {\n  var row = {\n    length: length,\n    items: new Array(length),\n    occupied: 0,\n    mergedSum: 0,\n    mergedTiles: new Set()\n  };\n\n  row.getLastNonOccupiedIndex = function () {\n    return row.length - row.occupied - 1;\n  };\n\n  row.canMerge = function (item) {\n    if (row.occupied > 0) {\n      var nextIndex = row.getLastNonOccupiedIndex() + 1; // already merged items can't be merged again within the same move\n\n      if (row.mergedTiles.has(nextIndex)) {\n        return false;\n      }\n\n      return item.number === row.items[nextIndex].number;\n    }\n\n    return false;\n  };\n\n  row.merge = function () {\n    var index = row.getLastNonOccupiedIndex() + 1;\n    var item = row.items[index];\n    item.number = item.number * 2;\n    item.isMerged = true;\n    row.items[index] = item;\n    row.mergedTiles.add(index); // calculate score\n\n    row.mergedSum = item.number;\n  };\n\n  return row;\n}\n\nfunction leftGet(squares, i, j) {\n  return squares[i][squares.length - j - 1];\n}\n\nfunction leftSet(squares, i, j, item) {\n  squares[i][squares.length - j - 1] = item;\n}\n\n;\n\nfunction upGet(squares, i, j) {\n  var length = squares.length;\n  return squares[length - j - 1][i];\n}\n\nfunction upSet(squares, i, j, item) {\n  var length = squares.length;\n  squares[length - j - 1][i] = item;\n}\n\n;\n\nfunction rightGet(squares, i, j) {\n  return squares[i][j];\n}\n\nfunction rightSet(squares, i, j, item) {\n  squares[i][j] = item;\n}\n\n;\n\nfunction downGet(squares, i, j) {\n  return squares[j][i];\n}\n\nfunction downSet(squares, i, j, item) {\n  squares[j][i] = item;\n}\n\n;\nexport function handleLeft(state) {\n  var accessors = {\n    get: leftGet,\n    set: leftSet\n  };\n  return processMove(state, accessors);\n}\nexport function handleRight(state) {\n  var accessors = {\n    get: rightGet,\n    set: rightSet\n  };\n  return processMove(state, accessors);\n}\nexport function handleUp(state) {\n  var accessors = {\n    get: upGet,\n    set: upSet\n  };\n  return processMove(state, accessors);\n}\nexport function handleDown(state) {\n  var accessors = {\n    get: downGet,\n    set: downSet\n  };\n  return processMove(state, accessors);\n}\nexport function handleNone(state) {\n  return {\n    squares: state.squares,\n    isMoved: false,\n    isStarted: state.isStarted,\n    score: state.score\n  };\n}","map":{"version":3,"sources":["/home/aashan/2048/src/actions/moveHandlers.js"],"names":["processMove","state","accessors","canMove","squares","isMoved","isStarted","score","map","arr","square","copy","length","get","set","i","row","getRowObject","j","item","isNew","isMerged","index","getLastNonOccupiedIndex","canMerge","merge","mergedSum","occupied","items","startItem","endItem","number","Array","mergedTiles","Set","nextIndex","has","add","leftGet","leftSet","upGet","upSet","rightGet","rightSet","downGet","downSet","handleLeft","handleRight","handleUp","handleDown","handleNone"],"mappings":"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","sourcesContent":["  function processMove(state, accessors) {\n\n    if (!canMove(state.squares, accessors)) {\n      return { squares : state.squares, isMoved : false, isStarted : state.isStarted, score : state.score };\n    }\n\n    const squares = state.squares.map(arr => arr.map(square => square ? square.copy() : null));\n    let score = state.score;\n    const length = squares.length;\n\n    const get = accessors.get;\n    const set = accessors.set;\n    for (let i = 0; i !== length; i++) {\n      const row = getRowObject(length);\n\n      for (let j = length - 1; j >= 0; j--) {\n        const item = get(squares, i, j);\n        if (item) {\n          item.isNew = false;\n          item.isMerged = false;\n\n          const index = row.getLastNonOccupiedIndex();\n\n          if (row.canMerge(item)) {\n            row.merge();\n            score = score + row.mergedSum;\n          }\n          else {\n            row.occupied++;\n            row.items[index] = item; \n          }\n        }\n      }\n  \n      for (let j = 0; j !== length; j++) {\n        set(squares, i, j, row.items[j]);\n      }\n    }\n\n    return { squares : squares, isMoved : true, isStarted : true, score : score };\n  }\n\n  function canMove(squares, accessors) {\n    const length = squares.length;\n    const { get } = accessors;\n\n    for (let i = 0; i !== length; i++) {\n      let j = 0;\n      while (j < length - 1) {\n        const startItem = get(squares, i, j);\n        const endItem = get(squares, i, j + 1);\n\n        if (!startItem) {\n          j++;\n          continue;\n        }\n\n        if (!endItem) {\n          return true;\n        }\n\n        if (startItem.number === endItem.number) {\n          return true;\n        }\n\n        j++;\n      }\n    }\n\n    return false;\n  }\n\n  function getRowObject(length) {\n    const row = {\n      length : length,\n      items : new Array(length),\n      occupied : 0,\n      mergedSum : 0,\n      mergedTiles : new Set()\n    };\n\n    row.getLastNonOccupiedIndex = function() { return row.length - row.occupied - 1 };\n\n    row.canMerge = function(item) {\n      if (row.occupied > 0) {\n        const nextIndex = row.getLastNonOccupiedIndex() + 1;\n  \n        // already merged items can't be merged again within the same move\n        if (row.mergedTiles.has(nextIndex)) {\n          return false;\n        }\n  \n        return item.number === row.items[nextIndex].number;\n      }\n  \n      return false;\n    }\n\n    row.merge = function() {\n      const index = row.getLastNonOccupiedIndex() + 1;\n      const item = row.items[index];\n      item.number = item.number * 2;\n      item.isMerged = true;\n      row.items[index] = item;\n      row.mergedTiles.add(index);\n\n      // calculate score\n      row.mergedSum = item.number;\n    }\n\n    return row;\n  }\n  \n  function leftGet(squares, i, j) {\n    return squares[i][squares.length - j - 1];\n  }\n  \n  function leftSet (squares, i, j, item) {\n    squares[i][squares.length - j - 1] = item;\n  };\n  \n  function upGet(squares, i, j) {\n    const length = squares.length;\n    return squares[length - j - 1][i];\n  }\n  \n  function upSet(squares, i, j, item) {\n    const length = squares.length;\n    squares[length - j - 1][i] = item;\n  };\n  \n  function rightGet(squares, i, j) {\n    return squares[i][j];\n  }\n  \n  function rightSet(squares, i, j, item) {\n    squares[i][j] = item;\n  };\n  \n  function downGet(squares, i, j) {\n    return squares[j][i];\n  }\n  \n  function downSet(squares, i, j, item) {\n    squares[j][i] = item;\n  };\n\n  export function handleLeft(state) {\n    const accessors = { get : leftGet, set: leftSet };\n    return processMove(state, accessors);\n  }\n\n  export function handleRight(state) {\n    const accessors = { get : rightGet, set: rightSet };\n    return processMove(state, accessors);\n  }\n\n  export function handleUp(state) {\n    const accessors = { get : upGet, set: upSet };\n    return processMove(state, accessors);\n  }\n\n  export function handleDown(state) {\n    const accessors = { get : downGet, set: downSet };\n    return processMove(state, accessors);\n  }\n\n  export function handleNone(state) {\n    return { squares : state.squares, isMoved : false, isStarted : state.isStarted, score : state.score };\n  }"]},"metadata":{},"sourceType":"module"}