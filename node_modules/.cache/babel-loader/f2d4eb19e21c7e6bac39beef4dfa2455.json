{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/aashan/2048/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar appConfig_1 = require(\"./appConfig\");\n\nvar sessionStore_1 = require(\"./sessionStore\");\n\nvar authApp = require(\"./authApp\");\n\nvar authMessages = require(\"./authMessages\");\n\nvar storage = require(\"../storage\");\n\nvar utils_1 = require(\"../utils\");\n\nvar errors_1 = require(\"../errors\");\n\nvar logger_1 = require(\"../logger\");\n\nvar hub_1 = require(\"../storage/hub\");\n\nvar authConstants_1 = require(\"./authConstants\");\n/**\n *\n * Represents an instance of a signed in user for a particular app.\n *\n * A signed in user has access to two major pieces of information\n * about the user, the user's private key for that app and the location\n * of the user's gaia storage bucket for the app.\n *\n * A user can be signed in either directly through the interactive\n * sign in process or by directly providing the app private key.\n *\n\n *\n */\n\n\nvar UserSession =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a UserSession object\n   *\n   * @param options\n   */\n  function UserSession(options) {\n    _classCallCheck(this, UserSession);\n\n    var runningInBrowser = true;\n\n    if (typeof window === 'undefined' && typeof self === 'undefined') {\n      logger_1.Logger.debug('UserSession: not running in browser');\n      runningInBrowser = false;\n    }\n\n    if (options && options.appConfig) {\n      this.appConfig = options.appConfig;\n    } else if (runningInBrowser) {\n      this.appConfig = new appConfig_1.AppConfig();\n    } else {\n      throw new errors_1.MissingParameterError('You need to specify options.appConfig');\n    }\n\n    if (options && options.sessionStore) {\n      this.store = options.sessionStore;\n    } else if (runningInBrowser) {\n      if (options) {\n        this.store = new sessionStore_1.LocalStorageStore(options.sessionOptions);\n      } else {\n        this.store = new sessionStore_1.LocalStorageStore();\n      }\n    } else if (options) {\n      this.store = new sessionStore_1.InstanceDataStore(options.sessionOptions);\n    } else {\n      this.store = new sessionStore_1.InstanceDataStore();\n    }\n  }\n  /**\n   * Generates an authentication request and redirects the user to the Blockstack\n   * browser to approve the sign in request.\n   *\n   * Please note that this requires that the web browser properly handles the\n   * `blockstack:` URL protocol handler.\n   *\n   * Most applications should use this\n   * method for sign in unless they require more fine grained control over how the\n   * authentication request is generated. If your app falls into this category,\n   * use [[generateAndStoreTransitKey]], [[makeAuthRequest]],\n   * and [[redirectToSignInWithAuthRequest]] to build your own sign in process.\n   *\n   * @param redirectURI Location of your application.\n   * @param manifestURI Location of the manifest.json file\n   * @param scopes Permissions requested by the application. Possible values are\n   *  `store_write` (default) or `publish_data`.\n   *\n   * @returns {void}\n   */\n\n\n  _createClass(UserSession, [{\n    key: \"redirectToSignIn\",\n    value: function redirectToSignIn(redirectURI, manifestURI, scopes) {\n      var transitKey = this.generateAndStoreTransitKey();\n      var authRequest = this.makeAuthRequest(transitKey, redirectURI, manifestURI, scopes);\n      var authenticatorURL = this.appConfig && this.appConfig.authenticatorURL;\n      return authApp.redirectToSignInWithAuthRequest(authRequest, authenticatorURL);\n    }\n    /**\n     * Redirects the user to the Blockstack browser to approve the sign in request.\n     * To construct a request see the [[makeAuthRequest]] function.\n     *\n     * The user is redirected to the authenticator URL specified in the `AppConfig`\n     * if the `blockstack:` protocol handler is not detected.\n     * Please note that the protocol handler detection does not work on all browsers.\n     *\n     * @param authRequest A request string built by the [[makeAuthRequest]] function\n     * @param blockstackIDHost The ID of the Blockstack Browser application.\n     *\n     */\n\n  }, {\n    key: \"redirectToSignInWithAuthRequest\",\n    value: function redirectToSignInWithAuthRequest(authRequest, blockstackIDHost) {\n      authRequest = authRequest || this.makeAuthRequest();\n      var authenticatorURL = blockstackIDHost || this.appConfig && this.appConfig.authenticatorURL;\n      return authApp.redirectToSignInWithAuthRequest(authRequest, authenticatorURL);\n    }\n    /**\n     * Generates an authentication request that can be sent to the Blockstack\n     * browser for the user to approve sign in. This authentication request can\n     * then be used for sign in by passing it to the [[redirectToSignInWithAuthRequest]]\n     * method.\n     *\n     * *Note*: This method should only be used if you want to use a customized authentication\n     * flow. Typically, you'd use [[redirectToSignIn]] which is the default sign in method.\n     *\n     * @param transitKey A HEX encoded transit private key.\n     * @param redirectURI Location to redirect the user to after sign in approval.\n     * @param manifestURI Location of this app's manifest file.\n     * @param scopes The permissions this app is requesting. The default is `store_write`.\n     * @param appDomain The origin of the app.\n     * @param expiresAt The time at which this request is no longer valid.\n     * @param extraParams Any extra parameters to pass to the authenticator. Use this to\n     * pass options that aren't part of the Blockstack authentication specification,\n     * but might be supported by special authenticators.\n     *\n     * @returns {String} the authentication request\n     */\n\n  }, {\n    key: \"makeAuthRequest\",\n    value: function makeAuthRequest(transitKey, redirectURI, manifestURI, scopes, appDomain) {\n      var expiresAt = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : utils_1.nextHour().getTime();\n      var extraParams = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n      var appConfig = this.appConfig;\n\n      if (!appConfig) {\n        throw new errors_1.InvalidStateError('Missing AppConfig');\n      }\n\n      transitKey = transitKey || this.generateAndStoreTransitKey();\n      redirectURI = redirectURI || appConfig.redirectURI();\n      manifestURI = manifestURI || appConfig.manifestURI();\n      scopes = scopes || appConfig.scopes;\n      appDomain = appDomain || appConfig.appDomain;\n      return authMessages.makeAuthRequest(transitKey, redirectURI, manifestURI, scopes, appDomain, expiresAt, extraParams);\n    }\n    /**\n     * Generates a ECDSA keypair to\n     * use as the ephemeral app transit private key\n     * and store in the session.\n     *\n     * @returns {String} the hex encoded private key\n     *\n     */\n\n  }, {\n    key: \"generateAndStoreTransitKey\",\n    value: function generateAndStoreTransitKey() {\n      var sessionData = this.store.getSessionData();\n      var transitKey = authMessages.generateTransitKey();\n      sessionData.transitKey = transitKey;\n      this.store.setSessionData(sessionData);\n      return transitKey;\n    }\n    /**\n     * Retrieve the authentication token from the URL query.\n     *\n     * @returns {String} the authentication token if it exists otherwise `null`\n     */\n\n  }, {\n    key: \"getAuthResponseToken\",\n    value: function getAuthResponseToken() {\n      return authApp.getAuthResponseToken();\n    }\n    /**\n     * Check if there is a authentication request that hasn't been handled.\n     *\n     * @returns{Boolean} `true` if there is a pending sign in, otherwise `false`\n     */\n\n  }, {\n    key: \"isSignInPending\",\n    value: function isSignInPending() {\n      return authApp.isSignInPending();\n    }\n    /**\n     * Check if a user is currently signed in.\n     *\n     * @returns {Boolean} `true` if the user is signed in, `false` if not.\n     */\n\n  }, {\n    key: \"isUserSignedIn\",\n    value: function isUserSignedIn() {\n      return !!this.store.getSessionData().userData;\n    }\n    /**\n     * Try to process any pending sign in request by returning a `Promise` that resolves\n     * to the user data object if the sign in succeeds.\n     *\n     * @param {String} authResponseToken - the signed authentication response token\n     * @returns {Promise} that resolves to the user data object if successful and rejects\n     * if handling the sign in request fails or there was no pending sign in request.\n     */\n\n  }, {\n    key: \"handlePendingSignIn\",\n    value: function handlePendingSignIn() {\n      var authResponseToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAuthResponseToken();\n      var transitKey = this.store.getSessionData().transitKey;\n      var nameLookupURL = this.store.getSessionData().coreNode;\n      return authApp.handlePendingSignIn(nameLookupURL, authResponseToken, transitKey, this);\n    }\n    /**\n     * Retrieves the user data object. The user's profile is stored in the key [[Profile]].\n     *\n     * @returns {Object} User data object.\n     */\n\n  }, {\n    key: \"loadUserData\",\n    value: function loadUserData() {\n      var userData = this.store.getSessionData().userData;\n\n      if (!userData) {\n        throw new errors_1.InvalidStateError('No user data found. Did the user sign in?');\n      }\n\n      return userData;\n    }\n    /**\n     * Sign the user out and optionally redirect to given location.\n     * @param  redirectURL Location to redirect user to after sign out.\n     * Only used in environments with `window` available\n     */\n\n  }, {\n    key: \"signUserOut\",\n    value: function signUserOut(redirectURL) {\n      authApp.signUserOut(redirectURL, this);\n    }\n    /**\n     * Encrypts the data provided with the app public key.\n     * @param {String|Buffer} content  the data to encrypt\n     * @param {String} options.publicKey the hex string of the ECDSA public\n     * key to use for encryption. If not provided, will use user's appPrivateKey.\n     *\n     * @returns {String} Stringified ciphertext object\n     */\n\n  }, {\n    key: \"encryptContent\",\n    value: function encryptContent(content, options) {\n      return storage.encryptContent(content, options, this);\n    }\n    /**\n     * Decrypts data encrypted with `encryptContent` with the\n     * transit private key.\n     * @param {String|Buffer} content - encrypted content.\n     * @param {String} options.privateKey - The hex string of the ECDSA private\n     * key to use for decryption. If not provided, will use user's appPrivateKey.\n     * @returns {String|Buffer} decrypted content.\n     */\n\n  }, {\n    key: \"decryptContent\",\n    value: function decryptContent(content, options) {\n      return storage.decryptContent(content, options, this);\n    }\n    /**\n     * Stores the data provided in the app's data store to to the file specified.\n     * @param {String} path - the path to store the data in\n     * @param {String|Buffer} content - the data to store in the file\n     * @param options a [[PutFileOptions]] object\n     *\n     * @returns {Promise} that resolves if the operation succeed and rejects\n     * if it failed\n     */\n\n  }, {\n    key: \"putFile\",\n    value: function putFile(path, content, options) {\n      return storage.putFile(path, content, options, this);\n    }\n    /**\n     * Retrieves the specified file from the app's data store.\n     *\n     * @param {String} path - the path to the file to read\n     * @param {Object} options a [[GetFileOptions]] object\n     *\n     * @returns {Promise} that resolves to the raw data in the file\n     * or rejects with an error\n     */\n\n  }, {\n    key: \"getFile\",\n    value: function getFile(path, options) {\n      return storage.getFile(path, options, this);\n    }\n    /**\n     * Get the URL for reading a file from an app's data store.\n     *\n     * @param {String} path - the path to the file to read\n     *\n     * @returns {Promise<string>} that resolves to the URL or rejects with an error\n     */\n\n  }, {\n    key: \"getFileUrl\",\n    value: function getFileUrl(path, options) {\n      return storage.getFileUrl(path, options, this);\n    }\n    /**\n     * List the set of files in this application's Gaia storage bucket.\n     *\n     * @param {function} callback - a callback to invoke on each named file that\n     * returns `true` to continue the listing operation or `false` to end it\n     *\n     * @returns {Promise} that resolves to the number of files listed\n     */\n\n  }, {\n    key: \"listFiles\",\n    value: function listFiles(callback) {\n      return storage.listFiles(callback, this);\n    }\n    /**\n     * Deletes the specified file from the app's data store.\n     * @param path - The path to the file to delete.\n     * @param options - Optional options object.\n     * @param options.wasSigned - Set to true if the file was originally signed\n     * in order for the corresponding signature file to also be deleted.\n     * @returns Resolves when the file has been removed or rejects with an error.\n     */\n\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(path, options) {\n      return storage.deleteFile(path, options, this);\n    }\n    /**\n     *  @ignore\n     */\n\n  }, {\n    key: \"getOrSetLocalGaiaHubConnection\",\n    value: function getOrSetLocalGaiaHubConnection() {\n      var sessionData = this.store.getSessionData();\n      var userData = sessionData.userData;\n\n      if (!userData) {\n        throw new errors_1.InvalidStateError('Missing userData');\n      }\n\n      var hubConfig = userData.gaiaHubConfig;\n\n      if (hubConfig) {\n        return Promise.resolve(hubConfig);\n      }\n\n      return this.setLocalGaiaHubConnection();\n    }\n    /**\n     * These two functions are app-specific connections to gaia hub,\n     *   they read the user data object for information on setting up\n     *   a hub connection, and store the hub config to localstorage\n     * @private\n     * @returns {Promise} that resolves to the new gaia hub connection\n     */\n\n  }, {\n    key: \"setLocalGaiaHubConnection\",\n    value: function setLocalGaiaHubConnection() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var userData, gaiaConfig, sessionData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                userData = this.loadUserData();\n\n                if (userData) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new errors_1.InvalidStateError('Missing userData');\n\n              case 3:\n                if (!userData.hubUrl) {\n                  userData.hubUrl = authConstants_1.BLOCKSTACK_DEFAULT_GAIA_HUB_URL;\n                }\n\n                _context.next = 6;\n                return hub_1.connectToGaiaHub(userData.hubUrl, userData.appPrivateKey, userData.gaiaAssociationToken);\n\n              case 6:\n                gaiaConfig = _context.sent;\n                userData.gaiaHubConfig = gaiaConfig;\n                sessionData = this.store.getSessionData();\n                sessionData.userData.gaiaHubConfig = gaiaConfig;\n                this.store.setSessionData(sessionData);\n                return _context.abrupt(\"return\", gaiaConfig);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }]);\n\n  return UserSession;\n}();\n\nexports.UserSession = UserSession;","map":{"version":3,"sources":["../../src/auth/userSession.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst appConfig_1 = require(\"./appConfig\");\nconst sessionStore_1 = require(\"./sessionStore\");\nconst authApp = require(\"./authApp\");\nconst authMessages = require(\"./authMessages\");\nconst storage = require(\"../storage\");\nconst utils_1 = require(\"../utils\");\nconst errors_1 = require(\"../errors\");\nconst logger_1 = require(\"../logger\");\nconst hub_1 = require(\"../storage/hub\");\nconst authConstants_1 = require(\"./authConstants\");\n/**\n *\n * Represents an instance of a signed in user for a particular app.\n *\n * A signed in user has access to two major pieces of information\n * about the user, the user's private key for that app and the location\n * of the user's gaia storage bucket for the app.\n *\n * A user can be signed in either directly through the interactive\n * sign in process or by directly providing the app private key.\n *\n\n *\n */\nclass UserSession {\n    /**\n     * Creates a UserSession object\n     *\n     * @param options\n     */\n    constructor(options) {\n        let runningInBrowser = true;\n        if (typeof window === 'undefined' && typeof self === 'undefined') {\n            logger_1.Logger.debug('UserSession: not running in browser');\n            runningInBrowser = false;\n        }\n        if (options && options.appConfig) {\n            this.appConfig = options.appConfig;\n        }\n        else if (runningInBrowser) {\n            this.appConfig = new appConfig_1.AppConfig();\n        }\n        else {\n            throw new errors_1.MissingParameterError('You need to specify options.appConfig');\n        }\n        if (options && options.sessionStore) {\n            this.store = options.sessionStore;\n        }\n        else if (runningInBrowser) {\n            if (options) {\n                this.store = new sessionStore_1.LocalStorageStore(options.sessionOptions);\n            }\n            else {\n                this.store = new sessionStore_1.LocalStorageStore();\n            }\n        }\n        else if (options) {\n            this.store = new sessionStore_1.InstanceDataStore(options.sessionOptions);\n        }\n        else {\n            this.store = new sessionStore_1.InstanceDataStore();\n        }\n    }\n    /**\n     * Generates an authentication request and redirects the user to the Blockstack\n     * browser to approve the sign in request.\n     *\n     * Please note that this requires that the web browser properly handles the\n     * `blockstack:` URL protocol handler.\n     *\n     * Most applications should use this\n     * method for sign in unless they require more fine grained control over how the\n     * authentication request is generated. If your app falls into this category,\n     * use [[generateAndStoreTransitKey]], [[makeAuthRequest]],\n     * and [[redirectToSignInWithAuthRequest]] to build your own sign in process.\n     *\n     * @param redirectURI Location of your application.\n     * @param manifestURI Location of the manifest.json file\n     * @param scopes Permissions requested by the application. Possible values are\n     *  `store_write` (default) or `publish_data`.\n     *\n     * @returns {void}\n     */\n    redirectToSignIn(redirectURI, manifestURI, scopes) {\n        const transitKey = this.generateAndStoreTransitKey();\n        const authRequest = this.makeAuthRequest(transitKey, redirectURI, manifestURI, scopes);\n        const authenticatorURL = this.appConfig && this.appConfig.authenticatorURL;\n        return authApp.redirectToSignInWithAuthRequest(authRequest, authenticatorURL);\n    }\n    /**\n     * Redirects the user to the Blockstack browser to approve the sign in request.\n     * To construct a request see the [[makeAuthRequest]] function.\n     *\n     * The user is redirected to the authenticator URL specified in the `AppConfig`\n     * if the `blockstack:` protocol handler is not detected.\n     * Please note that the protocol handler detection does not work on all browsers.\n     *\n     * @param authRequest A request string built by the [[makeAuthRequest]] function\n     * @param blockstackIDHost The ID of the Blockstack Browser application.\n     *\n     */\n    redirectToSignInWithAuthRequest(authRequest, blockstackIDHost) {\n        authRequest = authRequest || this.makeAuthRequest();\n        const authenticatorURL = blockstackIDHost\n            || (this.appConfig && this.appConfig.authenticatorURL);\n        return authApp.redirectToSignInWithAuthRequest(authRequest, authenticatorURL);\n    }\n    /**\n     * Generates an authentication request that can be sent to the Blockstack\n     * browser for the user to approve sign in. This authentication request can\n     * then be used for sign in by passing it to the [[redirectToSignInWithAuthRequest]]\n     * method.\n     *\n     * *Note*: This method should only be used if you want to use a customized authentication\n     * flow. Typically, you'd use [[redirectToSignIn]] which is the default sign in method.\n     *\n     * @param transitKey A HEX encoded transit private key.\n     * @param redirectURI Location to redirect the user to after sign in approval.\n     * @param manifestURI Location of this app's manifest file.\n     * @param scopes The permissions this app is requesting. The default is `store_write`.\n     * @param appDomain The origin of the app.\n     * @param expiresAt The time at which this request is no longer valid.\n     * @param extraParams Any extra parameters to pass to the authenticator. Use this to\n     * pass options that aren't part of the Blockstack authentication specification,\n     * but might be supported by special authenticators.\n     *\n     * @returns {String} the authentication request\n     */\n    makeAuthRequest(transitKey, redirectURI, manifestURI, scopes, appDomain, expiresAt = utils_1.nextHour().getTime(), extraParams = {}) {\n        const appConfig = this.appConfig;\n        if (!appConfig) {\n            throw new errors_1.InvalidStateError('Missing AppConfig');\n        }\n        transitKey = transitKey || this.generateAndStoreTransitKey();\n        redirectURI = redirectURI || appConfig.redirectURI();\n        manifestURI = manifestURI || appConfig.manifestURI();\n        scopes = scopes || appConfig.scopes;\n        appDomain = appDomain || appConfig.appDomain;\n        return authMessages.makeAuthRequest(transitKey, redirectURI, manifestURI, scopes, appDomain, expiresAt, extraParams);\n    }\n    /**\n     * Generates a ECDSA keypair to\n     * use as the ephemeral app transit private key\n     * and store in the session.\n     *\n     * @returns {String} the hex encoded private key\n     *\n     */\n    generateAndStoreTransitKey() {\n        const sessionData = this.store.getSessionData();\n        const transitKey = authMessages.generateTransitKey();\n        sessionData.transitKey = transitKey;\n        this.store.setSessionData(sessionData);\n        return transitKey;\n    }\n    /**\n     * Retrieve the authentication token from the URL query.\n     *\n     * @returns {String} the authentication token if it exists otherwise `null`\n     */\n    getAuthResponseToken() {\n        return authApp.getAuthResponseToken();\n    }\n    /**\n     * Check if there is a authentication request that hasn't been handled.\n     *\n     * @returns{Boolean} `true` if there is a pending sign in, otherwise `false`\n     */\n    isSignInPending() {\n        return authApp.isSignInPending();\n    }\n    /**\n     * Check if a user is currently signed in.\n     *\n     * @returns {Boolean} `true` if the user is signed in, `false` if not.\n     */\n    isUserSignedIn() {\n        return !!this.store.getSessionData().userData;\n    }\n    /**\n     * Try to process any pending sign in request by returning a `Promise` that resolves\n     * to the user data object if the sign in succeeds.\n     *\n     * @param {String} authResponseToken - the signed authentication response token\n     * @returns {Promise} that resolves to the user data object if successful and rejects\n     * if handling the sign in request fails or there was no pending sign in request.\n     */\n    handlePendingSignIn(authResponseToken = this.getAuthResponseToken()) {\n        const transitKey = this.store.getSessionData().transitKey;\n        const nameLookupURL = this.store.getSessionData().coreNode;\n        return authApp.handlePendingSignIn(nameLookupURL, authResponseToken, transitKey, this);\n    }\n    /**\n     * Retrieves the user data object. The user's profile is stored in the key [[Profile]].\n     *\n     * @returns {Object} User data object.\n     */\n    loadUserData() {\n        const userData = this.store.getSessionData().userData;\n        if (!userData) {\n            throw new errors_1.InvalidStateError('No user data found. Did the user sign in?');\n        }\n        return userData;\n    }\n    /**\n     * Sign the user out and optionally redirect to given location.\n     * @param  redirectURL Location to redirect user to after sign out.\n     * Only used in environments with `window` available\n     */\n    signUserOut(redirectURL) {\n        authApp.signUserOut(redirectURL, this);\n    }\n    /**\n     * Encrypts the data provided with the app public key.\n     * @param {String|Buffer} content  the data to encrypt\n     * @param {String} options.publicKey the hex string of the ECDSA public\n     * key to use for encryption. If not provided, will use user's appPrivateKey.\n     *\n     * @returns {String} Stringified ciphertext object\n     */\n    encryptContent(content, options) {\n        return storage.encryptContent(content, options, this);\n    }\n    /**\n     * Decrypts data encrypted with `encryptContent` with the\n     * transit private key.\n     * @param {String|Buffer} content - encrypted content.\n     * @param {String} options.privateKey - The hex string of the ECDSA private\n     * key to use for decryption. If not provided, will use user's appPrivateKey.\n     * @returns {String|Buffer} decrypted content.\n     */\n    decryptContent(content, options) {\n        return storage.decryptContent(content, options, this);\n    }\n    /**\n     * Stores the data provided in the app's data store to to the file specified.\n     * @param {String} path - the path to store the data in\n     * @param {String|Buffer} content - the data to store in the file\n     * @param options a [[PutFileOptions]] object\n     *\n     * @returns {Promise} that resolves if the operation succeed and rejects\n     * if it failed\n     */\n    putFile(path, content, options) {\n        return storage.putFile(path, content, options, this);\n    }\n    /**\n     * Retrieves the specified file from the app's data store.\n     *\n     * @param {String} path - the path to the file to read\n     * @param {Object} options a [[GetFileOptions]] object\n     *\n     * @returns {Promise} that resolves to the raw data in the file\n     * or rejects with an error\n     */\n    getFile(path, options) {\n        return storage.getFile(path, options, this);\n    }\n    /**\n     * Get the URL for reading a file from an app's data store.\n     *\n     * @param {String} path - the path to the file to read\n     *\n     * @returns {Promise<string>} that resolves to the URL or rejects with an error\n     */\n    getFileUrl(path, options) {\n        return storage.getFileUrl(path, options, this);\n    }\n    /**\n     * List the set of files in this application's Gaia storage bucket.\n     *\n     * @param {function} callback - a callback to invoke on each named file that\n     * returns `true` to continue the listing operation or `false` to end it\n     *\n     * @returns {Promise} that resolves to the number of files listed\n     */\n    listFiles(callback) {\n        return storage.listFiles(callback, this);\n    }\n    /**\n     * Deletes the specified file from the app's data store.\n     * @param path - The path to the file to delete.\n     * @param options - Optional options object.\n     * @param options.wasSigned - Set to true if the file was originally signed\n     * in order for the corresponding signature file to also be deleted.\n     * @returns Resolves when the file has been removed or rejects with an error.\n     */\n    deleteFile(path, options) {\n        return storage.deleteFile(path, options, this);\n    }\n    /**\n     *  @ignore\n     */\n    getOrSetLocalGaiaHubConnection() {\n        const sessionData = this.store.getSessionData();\n        const userData = sessionData.userData;\n        if (!userData) {\n            throw new errors_1.InvalidStateError('Missing userData');\n        }\n        const hubConfig = userData.gaiaHubConfig;\n        if (hubConfig) {\n            return Promise.resolve(hubConfig);\n        }\n        return this.setLocalGaiaHubConnection();\n    }\n    /**\n     * These two functions are app-specific connections to gaia hub,\n     *   they read the user data object for information on setting up\n     *   a hub connection, and store the hub config to localstorage\n     * @private\n     * @returns {Promise} that resolves to the new gaia hub connection\n     */\n    setLocalGaiaHubConnection() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const userData = this.loadUserData();\n            if (!userData) {\n                throw new errors_1.InvalidStateError('Missing userData');\n            }\n            if (!userData.hubUrl) {\n                userData.hubUrl = authConstants_1.BLOCKSTACK_DEFAULT_GAIA_HUB_URL;\n            }\n            const gaiaConfig = yield hub_1.connectToGaiaHub(userData.hubUrl, userData.appPrivateKey, userData.gaiaAssociationToken);\n            userData.gaiaHubConfig = gaiaConfig;\n            const sessionData = this.store.getSessionData();\n            sessionData.userData.gaiaHubConfig = gaiaConfig;\n            this.store.setSessionData(sessionData);\n            return gaiaConfig;\n        });\n    }\n}\nexports.UserSession = UserSession;\n//# sourceMappingURL=userSession.js.map"]},"metadata":{},"sourceType":"script"}