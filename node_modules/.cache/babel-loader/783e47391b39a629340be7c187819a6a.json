{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/home/aashan/2048/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar service_1 = require(\"./service\");\n\nvar Github =\n/*#__PURE__*/\nfunction (_service_1$Service) {\n  _inherits(Github, _service_1$Service);\n\n  function Github() {\n    _classCallCheck(this, Github);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Github).apply(this, arguments));\n  }\n\n  _createClass(Github, null, [{\n    key: \"getBaseUrls\",\n    value: function getBaseUrls() {\n      var baseUrls = ['https://gist.github.com/', 'http://gist.github.com', 'gist.github.com'];\n      return baseUrls;\n    }\n  }, {\n    key: \"normalizeUrl\",\n    value: function normalizeUrl(proof) {\n      return '';\n    }\n  }, {\n    key: \"getProofUrl\",\n    value: function getProofUrl(proof) {\n      var baseUrls = this.getBaseUrls();\n      var proofUrl = proof.proof_url.toLowerCase();\n      proofUrl = _get(_getPrototypeOf(Github), \"prefixScheme\", this).call(this, proofUrl);\n\n      for (var i = 0; i < baseUrls.length; i++) {\n        var requiredPrefix = \"\".concat(baseUrls[i]).concat(proof.identifier).toLowerCase();\n\n        if (proofUrl.startsWith(requiredPrefix)) {\n          var raw = proofUrl.endsWith('/') ? 'raw' : '/raw';\n          return \"\".concat(proofUrl).concat(raw);\n        }\n      }\n\n      throw new Error(\"Proof url \".concat(proof.proof_url, \" is not valid for service \").concat(proof.service));\n    }\n  }]);\n\n  return Github;\n}(service_1.Service);\n\nexports.Github = Github;","map":{"version":3,"sources":["../../../src/profiles/services/github.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;IAEM,M;;;;;;;;;;;;;kCACc;AAChB,UAAM,QAAQ,GAAG,CAAC,0BAAD,EAA6B,wBAA7B,EAAuD,iBAAvD,CAAjB;AACA,aAAO,QAAP;AACD;;;iCAEmB,K,EAAU;AAC5B,aAAO,EAAP;AACD;;;gCAEkB,K,EAAU;AAC3B,UAAM,QAAQ,GAAG,KAAK,WAAL,EAAjB;AACA,UAAI,QAAQ,GAAG,KAAK,CAAC,SAAN,CAAgB,WAAhB,EAAf;AAEA,MAAA,QAAQ,kEAAsB,QAAtB,CAAR;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,YAAM,cAAc,GAAG,UAAG,QAAQ,CAAC,CAAD,CAAX,SAAiB,KAAK,CAAC,UAAvB,EAAoC,WAApC,EAAvB;;AACA,YAAI,QAAQ,CAAC,UAAT,CAAoB,cAApB,CAAJ,EAAyC;AACvC,cAAM,GAAG,GAAG,QAAQ,CAAC,QAAT,CAAkB,GAAlB,IAAyB,KAAzB,GAAiC,MAA7C;AACA,2BAAU,QAAV,SAAqB,GAArB;AACD;AACF;;AACD,YAAM,IAAI,KAAJ,qBAAuB,KAAK,CAAC,SAA7B,uCAAmE,KAAK,CAAC,OAAzE,EAAN;AACD;;;;EAxBkB,SAAA,CAAA,O;;AA2BZ,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst service_1 = require(\"./service\");\nclass Github extends service_1.Service {\n    static getBaseUrls() {\n        const baseUrls = ['https://gist.github.com/', 'http://gist.github.com', 'gist.github.com'];\n        return baseUrls;\n    }\n    static normalizeUrl(proof) {\n        return '';\n    }\n    static getProofUrl(proof) {\n        const baseUrls = this.getBaseUrls();\n        let proofUrl = proof.proof_url.toLowerCase();\n        proofUrl = super.prefixScheme(proofUrl);\n        for (let i = 0; i < baseUrls.length; i++) {\n            const requiredPrefix = `${baseUrls[i]}${proof.identifier}`.toLowerCase();\n            if (proofUrl.startsWith(requiredPrefix)) {\n                const raw = proofUrl.endsWith('/') ? 'raw' : '/raw';\n                return `${proofUrl}${raw}`;\n            }\n        }\n        throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);\n    }\n}\nexports.Github = Github;\n//# sourceMappingURL=github.js.map"]},"metadata":{},"sourceType":"script"}